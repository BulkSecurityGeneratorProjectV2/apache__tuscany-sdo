/**
 *
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */

package org.apache.tuscany.samples.sdo.otherSources;

import java.io.FileInputStream;
import java.io.InputStream;
import java.util.List;

import commonj.sdo.DataObject;
import commonj.sdo.helper.HelperContext;
import commonj.sdo.helper.XMLDocument;
import commonj.sdo.helper.XMLHelper;
import commonj.sdo.helper.XSDHelper;

import org.apache.tuscany.samples.sdo.SampleBase;
import org.apache.tuscany.samples.sdo.SdoSampleConstants;

/**
 * Reads purchase order DataObject from XML, based upon Fuhwei Lwo's paper <A
 * HREF="http://www-128.ibm.com/developerworks/webservices/library/ws-sdoxmlschema/"
 * title="Me" onClick="checkLinks(this)">Create and read an XML document based on XML
 * Schema</A>.  Uses file
 * {@link org.apache.tuscany.samples.sdo.SdoSampleConstants#PO_XML_GENERATED}
 * previously generated by {@link CreatePurchaseOrder} to populate purchase order
 * DataObject
 * <p>
 * <b>Usage:</b> <br>
 * This sample can easily be run from within Eclipse as a Java Application if tuscany or 
 * the sample-sdo project is imported into Eclipse as an existing project.
 * <br><br>
 * If executing as a standalone application please do the following: 
 * <br>
 * <UL>
 * <LI>Include the following jar files on your classpath :
 * <UL>
 * <LI>SDO API and Tuscany Implementation
 * <UL>
 * <LI>sdo-api-{version}.jar - SDO API
 * <LI>tuscany-sdo-impl-{version}.jar - Tuscany SDO implementation
 * </UL>
 * </LI>
 * <LI>EMF dependencies. 
 * <UL>
 * <LI>emf-common-{version}.jar - some common framework utility and base classes
 * <LI>emf-ecore-{version}.jar - the EMF core runtime implementation classes (the Ecore metamodel)
 * <LI>emf-ecore-change-{version}.jar - the EMF change recorder and framework
 * <LI>emf-ecore-xmi-{version}.jar - EMF's default XML (and XMI) serializer and loader
 * <LI>xsd-{version}.jar - the XML Schema model
 * </UL>
 * </LI>
 * </UL>
 * 
 * These jar files can be obtained by downloading and unpacking a <a href="http://cwiki.apache.org/TUSCANY/sdo-downloads.html" target="_blank">Tuscany binary distribution</a></LI>
 * <LI>Execute: <br>
 * java org.apache.tuscany.samples.sdo.otherSources.ReadPurchaseOrder</LI>
 * </UL>
 * 
 */
public class ReadPurchaseOrder extends SampleBase {
  


  
    public ReadPurchaseOrder(Integer userLevel) {
      super(userLevel);
    }

    private void definePOTypes(HelperContext scope) throws Exception {
        InputStream is = ClassLoader.getSystemResourceAsStream(SdoSampleConstants.PO_XSD_RESOURCE);
        if (is == null) {
            System.out.println("InputStream is null");
        } else {
            System.out.println("Obtained Input Stream from resource");
        }
        scope.getXSDHelper().define(is, null);
        is.close();
    }

    public static void main(String[] args) {
      // TODO make the default level NOVICE, once the rest of the sample has been
      // converted to using commentary()
      ReadPurchaseOrder sample = new ReadPurchaseOrder(INTERMEDIATE);

      try {
        sample.run();
      }
      catch (Exception e) {
        sample.somethingUnexpectedHasHappened(e);
      }
    }

    public void runSample () throws Exception {
        System.out.println("***************************************");
        System.out.println("SDO Sample ReadPurchaseOrder");
        System.out.println("***************************************");
        System.out.println("This sample is based upon Fuhwei Lwo's paper http://www-128.ibm.com/developerworks/webservices/library/ws-sdoxmlschema/");
        System.out.println("previously generated by CreatePurchaseOrder sample to populate purchase order DataObject");

        System.out.println("***************************************");

        try {
          
            HelperContext scope = createScopeForTypes();
            
            definePOTypes(scope);

            FileInputStream fis = null;
            try {
                fis = new FileInputStream(SdoSampleConstants.PO_XML_GENERATED);
            } catch (Exception e) {
                System.out.println("Sorry an error occcured, please run CreatePurchaseOrder sample first");
                System.out.println("Exception : " + e.toString());
                e.printStackTrace();
                return;
            }

            XMLDocument xmlDoc = scope.getXMLHelper().load(fis);

            DataObject purchaseOrder = xmlDoc.getRootObject();

            System.out.println("Order date: " + purchaseOrder.get("orderDate"));
            System.out.println("Comment: " + purchaseOrder.get("comment"));

            DataObject shipTo = purchaseOrder.getDataObject("shipTo");
            System.out.println("Ship to name: " + shipTo.get("name"));

            DataObject billTo = purchaseOrder.getDataObject("billTo");
            System.out.println("Bill to name: " + billTo.get("name"));
            System.out.println();

            DataObject items = purchaseOrder.getDataObject("items");
            List itemList = items.getList("item");
            for (int i = 0; i < itemList.size(); i++) {

                DataObject item = (DataObject) itemList.get(i);

                System.out.println("Part num: " + item.get("partNum"));
                System.out.println("Product name: " + item.get("productName"));
            } // for
        } catch (Exception e) {
            System.out.println("Sorry an error was encountered " + e.toString());
            e.printStackTrace();
        }
        System.out.println("GoodBye");
    }
}
